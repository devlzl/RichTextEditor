diff --git a/node_modules/prosemirror-markdown/dist/index.js b/node_modules/prosemirror-markdown/dist/index.js
index df40be2..7fdb018 100644
--- a/node_modules/prosemirror-markdown/dist/index.js
+++ b/node_modules/prosemirror-markdown/dist/index.js
@@ -454,6 +454,30 @@ const defaultMarkdownSerializer = new MarkdownSerializer({
     },
     text(state, node) {
         state.text(node.text, !state.inAutolink);
+    },
+    audio(state, node) {
+        state.write(`<audio src="${node.attrs.src}" controls></audio>`)
+        state.closeBlock(node)
+    },
+    video(state, node) {
+        state.write(`<video src="${node.attrs.src}" controls></video>`)
+        state.closeBlock(node)
+    },
+    uploadingImage(state, node) {
+        state.write(`<uploading-image></uploading-image>`)
+        state.closeBlock(node)
+    },
+    reuploadImage(state, node) {
+        state.write(`<reupload-image></reupload-image>`)
+        state.closeBlock(node)
+    },
+    uploadingFile(state, node) {
+        state.write(`<uploading-file></uploading-file>`)
+        state.closeBlock(node)
+    },
+    reuploadFile(state, node) {
+        state.write(`<reupload-file></reupload-file>`)
+        state.closeBlock(node)
     }
 }, {
     em: { open: "*", close: "*", mixable: true, expelEnclosingWhitespace: true },
@@ -473,7 +497,8 @@ const defaultMarkdownSerializer = new MarkdownSerializer({
     },
     code: { open(_state, _mark, parent, index) { return backticksFor(parent.child(index), -1); },
         close(_state, _mark, parent, index) { return backticksFor(parent.child(index - 1), 1); },
-        escape: false }
+        escape: false },
+    del: { open: "~~", close: "~~", mixable: true, expelEnclosingWhitespace: true }
 });
 function backticksFor(node, side) {
     let ticks = /`+/g, m, len = 0;
